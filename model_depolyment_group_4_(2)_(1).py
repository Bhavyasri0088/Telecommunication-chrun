# -*- coding: utf-8 -*-
"""model_depolyment_group_4 (2) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ldOuixYZ6cRar028qqi6V9EhdDRGetR5
"""

app_code = """
import streamlit as st
import pandas as pd
import pickle

# Load the trained model
with open(r"C:\\Users\\User\\Downloads\\random_forest.pkl", "rb") as f:
    model = pickle.load(f)

# Streamlit app
st.title("Telecommunication Customer Churn Prediction")

st.write("Provide the customer details below:")

# User inputs
account_length = st.number_input("Account Length", min_value=0, value=100)
voice_plan = st.selectbox("Voice Plan", ["yes", "no"])
voice_messages = st.number_input("Voice Messages", min_value=0, value=0)
intl_plan = st.selectbox("International Plan", ["yes", "no"])
intl_mins = st.number_input("International Minutes", min_value=0.0, value=10.0)
intl_calls = st.number_input("International Calls", min_value=0, value=4)
intl_charge = st.number_input("International Charge", min_value=0.0, value=2.77)
day_mins = st.number_input("Day Minutes", min_value=0.0, value=180.0)
day_calls = st.number_input("Day Calls", min_value=0, value=100)
day_charge = st.number_input("Day Charge", min_value=0.0, value=17.05)
eve_mins = st.number_input("Evening Minutes", min_value=0.0, value=200.0)
eve_calls = st.number_input("Evening Calls", min_value=0, value=100)
eve_charge = st.number_input("Evening Charge", min_value=0.0, value=17.0)
night_mins = st.number_input("Night Minutes", min_value=0.0, value=200.0)
night_calls = st.number_input("Night Calls", min_value=0, value=100)
night_charge = st.number_input("Night Charge", min_value=0.0, value=9.0)
customer_calls = st.number_input("Customer Service Calls", min_value=0, value=1)

# Prepare input data for prediction
input_data = pd.DataFrame({
    "account.length": [account_length],
    "voice.plan": [1 if voice_plan == "yes" else 0],
    "voice.messages": [voice_messages],
    "intl.plan": [1 if intl_plan == "yes" else 0],
    "intl.mins": [intl_mins],
    "intl.calls": [intl_calls],
    "intl.charge": [intl_charge],
    "day.mins": [day_mins],
    "day.calls": [day_calls],
    "day.charge": [day_charge],
    "eve.mins": [eve_mins],
    "eve.calls": [eve_calls],
    "eve.charge": [eve_charge],
    "night.mins": [night_mins],
    "night.calls": [night_calls],
    "night.charge": [night_charge],
    "customer.calls": [customer_calls],
})

# Predict churn
prediction = model.predict(input_data)

# Show result
if st.button("Predict"):
    if prediction[0] == 1:
        st.write("Customer churn detected! Immediate attention required to retain the client.")
    else:
        st.write("Customer is loyal and unlikely to churn. Maintain current engagement strategies.")
"""

# Save app.py
with open("app.py", "w") as file:
    file.write(app_code)

print("app.py created successfully.")

